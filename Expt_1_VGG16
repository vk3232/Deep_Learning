{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Exp: 1 VGG16**"
      ],
      "metadata": {
        "id": "v5tjFTAJDbBD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Name: Vrushabh Babasaheb Khatik**\n",
        "\n",
        "**Roll No: 413070**\n",
        "\n",
        "**GR No: 22020234**\n",
        "\n",
        "**Batch: DL5**"
      ],
      "metadata": {
        "id": "YZDWe8jxDs87"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sZzqtQskQIc9"
      },
      "outputs": [],
      "source": [
        "import keras"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LW3xTvZoQIc_"
      },
      "source": [
        "Loading VGG model. Available in keras.applications"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HFssBKyDQIdB",
        "outputId": "8ef333b4-757d-4d41-a8e6-e4f1c270a28e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"vgg16\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " input_4 (InputLayer)        [(None, 224, 224, 3)]     0         \n",
            "                                                                 \n",
            " block1_conv1 (Conv2D)       (None, 224, 224, 64)      1792      \n",
            "                                                                 \n",
            " block1_conv2 (Conv2D)       (None, 224, 224, 64)      36928     \n",
            "                                                                 \n",
            " block1_pool (MaxPooling2D)  (None, 112, 112, 64)      0         \n",
            "                                                                 \n",
            " block2_conv1 (Conv2D)       (None, 112, 112, 128)     73856     \n",
            "                                                                 \n",
            " block2_conv2 (Conv2D)       (None, 112, 112, 128)     147584    \n",
            "                                                                 \n",
            " block2_pool (MaxPooling2D)  (None, 56, 56, 128)       0         \n",
            "                                                                 \n",
            " block3_conv1 (Conv2D)       (None, 56, 56, 256)       295168    \n",
            "                                                                 \n",
            " block3_conv2 (Conv2D)       (None, 56, 56, 256)       590080    \n",
            "                                                                 \n",
            " block3_conv3 (Conv2D)       (None, 56, 56, 256)       590080    \n",
            "                                                                 \n",
            " block3_pool (MaxPooling2D)  (None, 28, 28, 256)       0         \n",
            "                                                                 \n",
            " block4_conv1 (Conv2D)       (None, 28, 28, 512)       1180160   \n",
            "                                                                 \n",
            " block4_conv2 (Conv2D)       (None, 28, 28, 512)       2359808   \n",
            "                                                                 \n",
            " block4_conv3 (Conv2D)       (None, 28, 28, 512)       2359808   \n",
            "                                                                 \n",
            " block4_pool (MaxPooling2D)  (None, 14, 14, 512)       0         \n",
            "                                                                 \n",
            " block5_conv1 (Conv2D)       (None, 14, 14, 512)       2359808   \n",
            "                                                                 \n",
            " block5_conv2 (Conv2D)       (None, 14, 14, 512)       2359808   \n",
            "                                                                 \n",
            " block5_conv3 (Conv2D)       (None, 14, 14, 512)       2359808   \n",
            "                                                                 \n",
            " block5_pool (MaxPooling2D)  (None, 7, 7, 512)         0         \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 25088)             0         \n",
            "                                                                 \n",
            " fc1 (Dense)                 (None, 4096)              102764544 \n",
            "                                                                 \n",
            " fc2 (Dense)                 (None, 4096)              16781312  \n",
            "                                                                 \n",
            " predictions (Dense)         (None, 1000)              4097000   \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 138,357,544\n",
            "Trainable params: 138,357,544\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "# load vgg model\n",
        "from keras.applications.vgg16 import VGG16\n",
        "# load the model\n",
        "model = VGG16()\n",
        "# summarize the model\n",
        "model.summary()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ksAjzv6hQIdC"
      },
      "source": [
        "Extracting only convolution layers and their weights"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "93waz74GQIdC",
        "outputId": "213d0a2e-6b49-4998-b1a7-f59530485106"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "block1_conv1 (3, 3, 3, 64)\n",
            "block1_conv2 (3, 3, 64, 64)\n",
            "block2_conv1 (3, 3, 64, 128)\n",
            "block2_conv2 (3, 3, 128, 128)\n",
            "block3_conv1 (3, 3, 128, 256)\n",
            "block3_conv2 (3, 3, 256, 256)\n",
            "block3_conv3 (3, 3, 256, 256)\n",
            "block4_conv1 (3, 3, 256, 512)\n",
            "block4_conv2 (3, 3, 512, 512)\n",
            "block4_conv3 (3, 3, 512, 512)\n",
            "block5_conv1 (3, 3, 512, 512)\n",
            "block5_conv2 (3, 3, 512, 512)\n",
            "block5_conv3 (3, 3, 512, 512)\n"
          ]
        }
      ],
      "source": [
        "# summarize filters in each convolutional layer\n",
        "#from keras.applications.vgg16 import VGG16\n",
        "from matplotlib import pyplot\n",
        "# load the model\n",
        "#model = VGG16()\n",
        "# summarize filter shapes\n",
        "for layer in model.layers:\n",
        "\t# check for convolutional layer\n",
        "\tif 'conv' not in layer.name:\n",
        "\t\tcontinue\n",
        "\t# get filter weights\n",
        "\tfilters, biases = layer.get_weights()\n",
        "\tprint(layer.name, filters.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aIjZhY4cQIdD"
      },
      "outputs": [],
      "source": [
        "# retrieve weights from the second hidden layer\n",
        "filters, biases = model.layers[1].get_weights() # Here we can give the layer no to visualize"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VM-SJsGzQIdD",
        "outputId": "93137e2f-633a-455a-c274-f1574789e793"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(3, 3, 3, 64)\n"
          ]
        }
      ],
      "source": [
        "print(filters.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Go8AUU3QIdE",
        "outputId": "338e1b69-d9a6-4f7b-8da3-d0a5bb756d26"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[[0.8601116 , 0.6161919 , 0.55114007, ..., 0.4212452 ,\n",
              "          0.4828852 , 0.5304859 ],\n",
              "         [0.9545779 , 0.5408773 , 0.6017826 , ..., 0.4582953 ,\n",
              "          0.4846108 , 0.5538601 ],\n",
              "         [0.89960235, 0.3896376 , 0.5539096 , ..., 0.42523453,\n",
              "          0.4852669 , 0.5518304 ]],\n",
              "\n",
              "        [[0.81635594, 0.65118545, 0.52590066, ..., 0.4087713 ,\n",
              "          0.340725  , 0.47531587],\n",
              "         [0.8683965 , 0.5615535 , 0.5647105 , ..., 0.44733417,\n",
              "          0.2931476 , 0.46953422],\n",
              "         [0.8437643 , 0.39145148, 0.5206881 , ..., 0.42896524,\n",
              "          0.30857468, 0.4940327 ]],\n",
              "\n",
              "        [[0.47662497, 0.63058364, 0.43417358, ..., 0.4150598 ,\n",
              "          0.22949417, 0.28977698],\n",
              "         [0.4609779 , 0.5572666 , 0.4450579 , ..., 0.4508793 ,\n",
              "          0.12949093, 0.22478487],\n",
              "         [0.4736674 , 0.40397066, 0.41671643, ..., 0.42346177,\n",
              "          0.16341406, 0.27143562]]],\n",
              "\n",
              "\n",
              "       [[[0.7392438 , 0.6404719 , 0.6507926 , ..., 0.43525034,\n",
              "          0.810127  , 0.7901605 ],\n",
              "         [0.7946921 , 0.5488246 , 0.7126644 , ..., 0.4703888 ,\n",
              "          0.86608565, 0.84737706],\n",
              "         [0.767142  , 0.37799242, 0.65472686, ..., 0.44734278,\n",
              "          0.84025717, 0.8312743 ]],\n",
              "\n",
              "        [[0.55478704, 0.6826218 , 0.6467724 , ..., 0.48393103,\n",
              "          0.7254765 , 0.81496185],\n",
              "         [0.55631167, 0.5759833 , 0.69669527, ..., 0.5216048 ,\n",
              "          0.73505795, 0.8445131 ],\n",
              "         [0.5637889 , 0.38582882, 0.6426892 , ..., 0.51357675,\n",
              "          0.7271578 , 0.8556534 ]],\n",
              "\n",
              "        [[0.23765364, 0.6508931 , 0.45429817, ..., 0.41053838,\n",
              "          0.31218964, 0.3372736 ],\n",
              "         [0.17024457, 0.56070673, 0.47241867, ..., 0.44369915,\n",
              "          0.25439772, 0.29604584],\n",
              "         [0.20940173, 0.3883068 , 0.43874004, ..., 0.42636505,\n",
              "          0.27921656, 0.3426477 ]]],\n",
              "\n",
              "\n",
              "       [[[0.47966576, 0.6256226 , 0.53464687, ..., 0.41405112,\n",
              "          0.7129372 , 0.560162  ],\n",
              "         [0.47875416, 0.5493164 , 0.58391243, ..., 0.4425156 ,\n",
              "          0.78985673, 0.6016313 ],\n",
              "         [0.48481962, 0.39486766, 0.5367759 , ..., 0.40757152,\n",
              "          0.7642704 , 0.5935313 ]],\n",
              "\n",
              "        [[0.31966972, 0.65861547, 0.52460825, ..., 0.42867762,\n",
              "          0.7157403 , 0.56620234],\n",
              "         [0.2662131 , 0.56731075, 0.5625993 , ..., 0.45979398,\n",
              "          0.7554137 , 0.58273125],\n",
              "         [0.3017171 , 0.39434877, 0.51834106, ..., 0.4387944 ,\n",
              "          0.74270797, 0.59851784]],\n",
              "\n",
              "        [[0.25103468, 0.63294035, 0.42663756, ..., 0.40495452,\n",
              "          0.41524813, 0.3174621 ],\n",
              "         [0.145611  , 0.55763006, 0.43700036, ..., 0.43213305,\n",
              "          0.3940431 , 0.27279767],\n",
              "         [0.19757837, 0.40186328, 0.40804785, ..., 0.4020266 ,\n",
              "          0.41293785, 0.31385297]]]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ],
      "source": [
        "# normalize filter values to 0-1 so we can visualize them\n",
        "f_min, f_max = filters.min(), filters.max()\n",
        "filters = (filters - f_min) / (f_max - f_min)\n",
        "filters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 252
        },
        "id": "xX4R_hRiQIdE",
        "outputId": "619b7b11-97a9-4a5a-813d-e454ec47b309"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 12 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# plot first few filters\n",
        "import matplotlib.pyplot as pyplot\n",
        "n_filters, ix = 4,1   #  if ix=2,1 next filters \n",
        "for i in range(n_filters):\n",
        "\t# get the filter\n",
        "\tf = filters[:, :, :, i]\n",
        "   \t# plot each channel separately\n",
        "\tfor j in range(3):\n",
        "\t\t# specify subplot and turn of axis\n",
        "\t\tax = pyplot.subplot(n_filters,3, ix)\n",
        "\t\tax.set_xticks([])\n",
        "\t\tax.set_yticks([])\n",
        "\t\t# plot filter channel in grayscale\n",
        "\t\tpyplot.imshow(f[:, :, j], cmap='gray')# Shows gray representation\n",
        "\t\t#pyplot.imshow(f[:, :, j], cmap='viridis') # Shows colorful representation\n",
        "\t\tix += 1\n",
        "# show the figure\n",
        "pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qJph_Z-gQIdF",
        "outputId": "31372439-f42b-4594-a684-340bcdc4d929"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[0.80131894 0.8660196  0.8439424 ]\n",
            "  [0.74228746 0.77673143 0.770278  ]\n",
            "  [0.76030266 0.7988131  0.79373205]]\n",
            "\n",
            " [[0.6009777  0.60014784 0.6020453 ]\n",
            "  [0.24144793 0.19277483 0.21640383]\n",
            "  [0.48856434 0.45506582 0.47630402]]\n",
            "\n",
            " [[0.5238073  0.48694667 0.50314265]\n",
            "  [0.20956579 0.12186978 0.15874107]\n",
            "  [0.40985623 0.34087518 0.3738913 ]]]\n"
          ]
        }
      ],
      "source": [
        "print(f)   "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0E-VMQ8JQIdF",
        "outputId": "b2e28460-8c9a-422d-ac05-2955b386c1ed"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 block1_conv1 (None, 224, 224, 64)\n",
            "2 block1_conv2 (None, 224, 224, 64)\n",
            "4 block2_conv1 (None, 112, 112, 128)\n",
            "5 block2_conv2 (None, 112, 112, 128)\n",
            "7 block3_conv1 (None, 56, 56, 256)\n",
            "8 block3_conv2 (None, 56, 56, 256)\n",
            "9 block3_conv3 (None, 56, 56, 256)\n",
            "11 block4_conv1 (None, 28, 28, 512)\n",
            "12 block4_conv2 (None, 28, 28, 512)\n",
            "13 block4_conv3 (None, 28, 28, 512)\n",
            "15 block5_conv1 (None, 14, 14, 512)\n",
            "16 block5_conv2 (None, 14, 14, 512)\n",
            "17 block5_conv3 (None, 14, 14, 512)\n"
          ]
        }
      ],
      "source": [
        "# summarize feature map shapes\n",
        "for i in range(len(model.layers)):\n",
        "\tlayer = model.layers[i]\n",
        "\t# check for convolutional layer\n",
        "\tif 'conv' not in layer.name:\n",
        "\t\tcontinue\n",
        "\t# summarize output shape\n",
        "\tprint(i, layer.name, layer.output.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "-zWyEEotQIdG"
      },
      "outputs": [],
      "source": [
        "from keras.applications.vgg16 import preprocess_input\n",
        "from keras.preprocessing.image import load_img\n",
        "from keras.preprocessing.image import img_to_array\n",
        "from keras.models import Model\n",
        "from matplotlib import pyplot \n",
        "from numpy import expand_dims\n",
        "# redefine model to output right after the second hidden layer\n",
        "model_layer2 = Model(inputs=model.inputs, outputs=model.layers[2].output)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MLlInpdKQIdG",
        "outputId": "e605159c-c149-4125-ba7d-e8d847445972"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_4\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " input_4 (InputLayer)        [(None, 224, 224, 3)]     0         \n",
            "                                                                 \n",
            " block1_conv1 (Conv2D)       (None, 224, 224, 64)      1792      \n",
            "                                                                 \n",
            " block1_conv2 (Conv2D)       (None, 224, 224, 64)      36928     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 38,720\n",
            "Trainable params: 38,720\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "model_layer2.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qVc8y9pjQIdH"
      },
      "outputs": [],
      "source": [
        "# load the image with the required shape\n",
        "img = load_img('/content/sample_data/dog.jpg', target_size=(224, 224))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iijv_mHEQIdH"
      },
      "outputs": [],
      "source": [
        "# convert the image to an array\n",
        "img = img_to_array(img)\n",
        "# expand dimensions so that it represents a single 'sample'\n",
        "img = expand_dims(img, axis=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bkLPT3daQIdI",
        "outputId": "faa3fb05-578e-40a0-fb5d-c1392cffa966"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 224, 224, 3)\n"
          ]
        }
      ],
      "source": [
        "print(img.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LKtXSLUCQIdI"
      },
      "outputs": [],
      "source": [
        "# prepare the image (e.g. scale pixel values for the vgg)\n",
        "img = preprocess_input(img)\n",
        "# get feature map for first hidden layer\n",
        "feature_maps2 = model_layer2.predict(img)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 252
        },
        "id": "Im-5bTbXQIdJ",
        "outputId": "112dcd4e-4ffc-46e7-d3b8-e103d760fc6c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 64 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# plot all 64 maps in an 8x8 squares\n",
        "square = 8\n",
        "ix = 1\n",
        "for _ in range(square):\n",
        "\tfor _ in range(square):\n",
        "\t\t# specify subplot and turn of axis\n",
        "\t\tax = pyplot.subplot(square, square, ix)\n",
        "\t\tax.set_xticks([])\n",
        "\t\tax.set_yticks([])\n",
        "\t\t# plot filter channel in grayscale\n",
        "\t\tpyplot.imshow(feature_maps2[0, :, :, ix-1], cmap='gray')\n",
        "\t\tix += 1\n",
        "# show the figure\n",
        "pyplot.show()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "name": "VGG Visualization.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}